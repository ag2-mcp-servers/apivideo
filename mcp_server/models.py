# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:35:34+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import AnyUrl, BaseModel, Field, RootModel, conint, constr


class AccessToken(BaseModel):
    access_token: Optional[str] = Field(
        None,
        description='The access token containing security credentials allowing you to acccess the API. The token lasts for one hour.',
        examples=[
            'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjUyZWM4NWUyMjFkODZjOWI0NDQ5NzBhMjQwMzUyOWQ4MDQyNGQ3ZmJjYjFlYWM2MjVlM2VkMjI2YWRlNTcxMDY2NDUyZDc0NjdhN2E4NjI0In0.eyJhdWQiOiJsaWJjYXN0IiwianRpIjoiNTJlYzg1ZTIyMWQ4NmM5YjQ0NDk3MGEyNDAzNTI5ZDgwNDI0ZDdmYmNiMWVhYzYyNWUzZWQyMjZhZGU1NzEwNjY0NTJkNzQ2N2E3YTg2MjQiLCJpYXQiOjE1MjUyNzYxNDcsIm5iZiI6MTUyNTI3NjE0NywiZXhwIjoxNTI1Mjc5NzQ3LCJzdWIiOiJ1c01vbml0b3IiLCJzY29wZXMiOlsibW9uaXRvci5saWJjYXN0LmNvbSJdLCJjb250ZXh0Ijp7InVzZXIiOiJ1c01vbml0b3IiLCJwcm9qZWN0IjoicHJNb25pdG9yIiwibWVtYmVyIjoibWVNb25pdG9yIn19.rUvishDNyJLNlI4W5VmguNecm5KD2uZgPkKJQbaqw-cJbSrVxkSbiKYtk_E3cz3WT7-IS2yFTsYN3uIo5Rbit8_HftweyEp2bdBRI8yjR6oZZ1sNJJXswISN1i2kk4r-aaxu7Xxf_LtsjOMUj_YZsvcc2nqBXPKjHbJCJryx3DDJaIcymOqao7nhQaCCQyrQooAXNTYs4E9fWN1dC_x2O-zok5TuG-xhEW-umwxfSUMWNgSTkz38ACceQ0PCJSgB3jqjDH4MwC7B3ppEPZuK5E6JhKeyRlalswRyYq3UQPnVeMTam7YQHsuTgbehF6WySW8i44o7V_MCe9hjPdp-WA'
        ],
    )
    expires_in: Optional[int] = Field(
        None,
        description='Lists the time in seconds when your access token expires. It lasts for one hour.',
    )
    refresh_token: Optional[str] = Field(
        None,
        description='A token you can use to get the next access token when your current access token expires.',
        examples=[
            'def50200a28d88fb9aaa921be78eeb5604b071101a334899a7d5fc7492cf8ea752962ddc8961fe5c126101d4ecacd980396eb2fd494995b812dffcb98256c4277f790d1f658fc2d2e34f350740544e5232d69d68d34c648271d706c5e7049adac0b1832d0fdf71809715cc7e97fa63f65966deadb501a55ff469b0fd23a637cb6acbe9d9b8594a17f09efc2efeed82984764a0065d5e29c950c7b081a61ba2aaa192be3085c400ee37eac50fa9320ce2cfe8916c8165418d23e9f91b6a5c8515e1d74ee193a5a1ca01954fbff27361c20184240be2359e0afbed0bf1c762cf872450b5e8b5d4704f4fd9583e4470adc98409dd42965709712806bd9019378a72eea0b4912ce684ffd833db5806ab84174f905db2a75380071d004615c944bb8f8c4045cce7234c2be9a2330522cf7f067b8e58f57cffb6edb4b7ef91313e12bcde47e5e76ceee7fa52990132288f345d33ed917ae4fd54b7284f8964d898e97e1ee3bc4157f75d7fee63976e4be66ac1ec32ef74afa533f0eb593523f226cbec57d196ac8962'
        ],
    )
    token_type: Optional[str] = Field(
        'bearer', description='The type of token you have.'
    )


class Quota(BaseModel):
    quotaRemaining: Optional[float] = Field(None, description='Deprecated')
    quotaTotal: Optional[float] = Field(None, description='Deprecated')
    quotaUsed: Optional[float] = Field(None, description='Deprecated')


class Account(BaseModel):
    environment: Optional[str] = Field(
        None,
        description='Deprecated. Whether you are using your production or sandbox API key will impact what environment is displayed here, as well as stats and features information. If you use your sandbox key, the environment is "sandbox." If you use your production key, the environment is "production."',
    )
    features: Optional[List[str]] = Field(
        None,
        description='Deprecated. What features are enabled for your account. Choices include: app.dynamic_metadata - the ability to dynamically tag videos to better segment and understand your audiences, app.event_log - the ability to create and retrieve a log detailing how your videos were interacted with, player.white_label - the ability to customise your player, stats.player_events - the ability to see statistics about how your player is being used, transcode.mp4_support - the ability to reformat content into mp4 using the H264 codec.',
        examples=['["app.dynamic_metadata, app.event_log"]'],
    )
    quota: Optional[Quota] = Field(None, description='Deprecated')


class AuthenticatePayload(BaseModel):
    apiKey: str = Field(
        ...,
        description='Your account API key. You can use your sandbox API key, or you can use your production API key.',
    )


class BadRequest(BaseModel):
    name: Optional[str] = None
    problems: Optional[List[BadRequest]] = None
    status: Optional[int] = None
    title: Optional[str] = None
    type: Optional[str] = None


class BytesRange(BaseModel):
    from_: Optional[int] = Field(
        None,
        alias='from',
        description='The starting point for the range of bytes for a chunk of a video.',
        examples=[0],
    )
    to: Optional[int] = Field(
        None,
        description='The ending point for the range of bytes for a chunk of a video.',
        examples=[9999],
    )
    total: Optional[int] = Field(
        None,
        description='The total number of bytes in the provided range.',
        examples=[10000],
    )


class CaptionsUpdatePayload(BaseModel):
    default: Optional[bool] = None


class CaptionsUploadPayload(BaseModel):
    file: bytes = Field(
        ...,
        description='The video text track (VTT) you want to upload.',
        examples=['https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/captions/en.vtt'],
    )


class Chapter(BaseModel):
    language: Optional[str] = None
    src: Optional[str] = Field(
        None,
        description='The link to your VTT file, which contains your chapters information for the video.',
        examples=['https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt'],
    )
    uri: Optional[str] = None


class ChaptersUpdatePayload(BaseModel):
    file: bytes = Field(
        ..., description='The VTT file describing the chapters you want to upload.'
    )


class Link(BaseModel):
    rel: Optional[str] = None
    uri: Optional[str] = None


class LiveStreamCreatePayload(BaseModel):
    name: str = Field(
        ...,
        description='Add a name for your live stream here.',
        examples=['My Live Stream Video'],
    )
    playerId: Optional[str] = Field(
        None,
        description='The unique identifier for the player.',
        examples=['pl4f4ferf5erfr5zed4fsdd'],
    )
    public: Optional[bool] = Field(
        None,
        description='BETA FEATURE Please limit all public = false ("private") livestreams to 3,000 users. Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view.',
    )
    record: Optional[bool] = Field(
        False,
        description='Whether you are recording or not. True for record, false for not record.',
        examples=[True],
    )


class LiveStreamThumbnailUploadPayload(BaseModel):
    file: bytes = Field(..., description='The image to be added as a thumbnail.')


class LiveStreamUpdatePayload(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The name you want to use for your live stream.',
        examples=['My Live Stream Video'],
    )
    playerId: Optional[str] = Field(
        None,
        description='The unique ID for the player associated with a live stream that you want to update.',
        examples=['pl45KFKdlddgk654dspkze'],
    )
    public: Optional[bool] = Field(
        None,
        description='BETA FEATURE Please limit all public = false ("private") livestreams to 3,000 users. Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view.',
    )
    record: Optional[bool] = Field(
        None,
        description='Use this to indicate whether you want the recording on or off. On is true, off is false.',
        examples=[True],
    )


class LiveStreamAssets(BaseModel):
    hls: Optional[AnyUrl] = Field(
        None,
        description='The http live streaming (HLS) link for your live video stream.',
        examples=['https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8'],
    )
    iframe: Optional[str] = Field(
        None,
        description='The embed code for the iframe containing your live video stream.',
        examples=[
            '<iframe src=\\"https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\\" width=\\"100%\\" height=\\"100%\\" frameborder=\\"0\\" scrolling=\\"no\\" allowfullscreen=\\"\\"></iframe>'
        ],
    )
    player: Optional[AnyUrl] = Field(
        None,
        description='A link to the video player that is playing your live stream.',
        examples=['https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr'],
    )
    thumbnail: Optional[AnyUrl] = Field(
        None,
        description='A link to the thumbnail for your video.',
        examples=['https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg'],
    )


class LiveStreamSessionClient(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The name of the browser used to view the live stream session.',
        examples=['Firefox'],
    )
    type: Optional[str] = Field(
        None,
        description='The type of client used to view the live stream session.',
        examples=['browser'],
    )
    version: Optional[str] = Field(
        None,
        description='The version of the browser used to view the live stream session.',
        examples=['67.0'],
    )


class LiveStreamSessionDevice(BaseModel):
    model: Optional[str] = Field(
        None,
        description='The specific model of the device, if known.',
        examples=['unknown'],
    )
    type: Optional[str] = Field(
        None,
        description='What the type is like desktop, laptop, mobile.',
        examples=['desktop'],
    )
    vendor: Optional[str] = Field(
        None,
        description='If known, what the brand of the device is, like Apple, Dell, etc.',
        examples=['Dell'],
    )


class LiveStreamSessionLocation(BaseModel):
    city: Optional[str] = Field(
        None,
        description='The city of the viewer of the live stream.',
        examples=['Paris'],
    )
    country: Optional[str] = Field(
        None,
        description='The country of the viewer of the live stream.',
        examples=['France'],
    )


class LiveStreamSessionReferrer(BaseModel):
    medium: Optional[str] = Field(
        None,
        description='The type of search that brought the viewer to the live stream. Organic would be they found it on their own, paid would be they found it via an advertisement.',
        examples=['organic'],
    )
    searchTerm: Optional[str] = Field(
        None,
        description='What term they searched for that led them to the live stream.',
        examples=['video stream'],
    )
    source: Optional[str] = Field(
        None,
        description='Where the viewer came from to see the live stream (usually where they searched from).',
        examples=['https://google.com'],
    )
    url: Optional[str] = Field(
        None,
        description='The website the viewer of the live stream was referred to in order to view the live stream.',
        examples=['https://api.video'],
    )


class LiveStreamSessionSession(BaseModel):
    endedAt: Optional[datetime] = Field(
        None,
        description='When the session ended, with the date and time presented in ISO-8601 format.',
        examples=['2019-06-24T12:45:01.109+00'],
    )
    loadedAt: Optional[datetime] = Field(
        None,
        description='When the session started, with the date and time presented in ISO-8601 format.',
        examples=['2019-06-24T11:45:01.109+00'],
    )
    sessionId: Optional[str] = Field(
        None,
        description='A unique identifier for your session. You can use this to track what happens during a specific session.',
    )


class Metadata(BaseModel):
    key: Optional[str] = Field(
        None, description='The constant that defines the data set.', examples=['Color']
    )
    value: Optional[str] = Field(
        None,
        description='A variable which belongs to the data set.',
        examples=['Green'],
    )


class NotFound(BaseModel):
    name: Optional[str] = None
    status: Optional[int] = None
    title: Optional[str] = None
    type: Optional[str] = None


class PaginationLink(BaseModel):
    rel: Optional[constr(pattern=r'^self$')] = None
    uri: Optional[AnyUrl] = None


class Assets(BaseModel):
    link: Optional[str] = Field(
        None,
        description='The path to the file containing your logo.',
        examples=['path/to/my/logo/mylogo.jpg'],
    )
    logo: Optional[str] = Field(
        None,
        description='The name of the file containing the logo you want to use.',
        examples=['mylogo.jpg'],
    )


class PlayerSessionEvent(BaseModel):
    at: Optional[int] = None
    emittedAt: Optional[datetime] = Field(
        None,
        description='When an event occurred, presented in ISO-8601 format.',
        examples=['2019-06-24T11:45:01.109+00'],
    )
    from_: Optional[int] = Field(None, alias='from')
    to: Optional[int] = None
    type: Optional[str] = Field(
        None,
        description='Possible values are: ready, play, pause, resume, seek.backward, seek.forward, end',
        examples=['play'],
    )


class Playerinput(BaseModel):
    backgroundBottom: Optional[str] = Field(
        None,
        description='RGBA color: bottom 50% of background. Default: rgba(0, 0, 0, .7)',
    )
    backgroundText: Optional[str] = Field(
        None, description='RGBA color for title text. Default: rgba(255, 255, 255, 1)'
    )
    backgroundTop: Optional[str] = Field(
        None,
        description='RGBA color: top 50% of background. Default: rgba(0, 0, 0, .7)',
    )
    enableApi: Optional[bool] = Field(
        True, description='enable/disable player SDK access. Default: true'
    )
    enableControls: Optional[bool] = Field(
        True, description='enable/disable player controls. Default: true'
    )
    forceAutoplay: Optional[bool] = Field(
        False, description='enable/disable player autoplay. Default: false'
    )
    forceLoop: Optional[bool] = Field(
        False, description='enable/disable looping. Default: false'
    )
    hideTitle: Optional[bool] = Field(
        False, description='enable/disable title. Default: false'
    )
    link: Optional[str] = Field(
        None, description='RGBA color for all controls. Default: rgba(255, 255, 255, 1)'
    )
    linkHover: Optional[str] = Field(
        None,
        description='RGBA color for all controls when hovered. Default: rgba(255, 255, 255, 1)',
    )
    text: Optional[str] = Field(
        None, description='RGBA color for timer text. Default: rgba(255, 255, 255, 1)'
    )
    trackBackground: Optional[str] = Field(
        None,
        description='RGBA color playback bar: background. Default: rgba(255, 255, 255, .2)',
    )
    trackPlayed: Optional[str] = Field(
        None,
        description='RGBA color playback bar: played content. Default: rgba(88, 131, 255, .95)',
    )
    trackUnplayed: Optional[str] = Field(
        None,
        description='RGBA color playback bar: downloaded but unplayed (buffered) content. Default: rgba(255, 255, 255, .35)',
    )


class PlayersUploadLogoPayload(BaseModel):
    file: bytes = Field(
        ...,
        description='The name of the file you want to use for your logo.',
        examples=['mylogo.jpg'],
    )
    link: str = Field(
        ...,
        description='The path to the file you want to upload and use as a logo.',
        examples=['path/to/my/logo/mylogo.jpg'],
    )


class Quality1(Enum):
    field_240p = '240p'
    field_360p = '360p'
    field_480p = '480p'
    field_720p = '720p'
    field_1080p = '1080p'
    field_2160p = '2160p'


class Status(Enum):
    waiting = 'waiting'
    encoding = 'encoding'
    encoded = 'encoded'
    failed = 'failed'


class Quality(BaseModel):
    quality: Optional[Quality1] = Field(
        None,
        description='The quality of the video you have, in pixels. Choices include 360p, 480p, 720p, 1080p, and 2160p.',
        examples=['720p'],
    )
    status: Optional[Status] = Field(
        None,
        description='The status of your video. Statuses include waiting - the video is waiting to be encoded. encoding - the video is in the process of being encoded. encoded - the video was successfully encoded. failed - the video failed to be encoded.',
    )


class RefreshTokenPayload(BaseModel):
    refreshToken: str = Field(
        ...,
        description="The refresh token is either the first refresh token you received when you authenticated with the auth/api-key endpoint, or it's the refresh token from the last time you used the auth/refresh endpoint. Place this in the body of your request to obtain a new access token (which is valid for an hour) and a new refresh token.\n",
    )


class Subtitle(BaseModel):
    default: Optional[bool] = Field(
        False,
        description='Whether you will have subtitles or not. True for yes you will have subtitles, false for no you will not have subtitles.',
        examples=[False],
    )
    src: Optional[str] = None
    srclang: Optional[str] = None
    uri: Optional[str] = None


class TokenCreatePayload(BaseModel):
    ttl: Optional[conint(ge=0, le=2147483647)] = Field(
        0,
        description='Time in seconds that the token will be active. A value of 0 means that the token has no exipration date. The default is to have no expiration.',
    )


class TokenUploadPayload(BaseModel):
    file: bytes = Field(
        ...,
        description='The path to the video you want to upload.',
        examples=['path/to/video/video.mp4'],
    )
    videoId: Optional[str] = Field(
        None,
        description='The video id returned by the first call to this endpoint in a large video upload scenario.',
    )


class UploadToken(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the token was created, displayed in ISO-8601 format.',
        examples=['2019-12-16T08:25:51+00:00'],
    )
    expiresAt: Optional[datetime] = Field(
        None,
        description='When the token expires, displayed in ISO-8601 format.',
        examples=['2019-12-16T09:25:51+00:00'],
    )
    token: Optional[str] = Field(
        None,
        description='The unique identifier for the token you will use to authenticate an upload.',
        examples=['to1tcmSFHeYY5KzyhOqVKMKb'],
    )
    ttl: Optional[conint(ge=0, le=2147483647)] = Field(
        None, description='Time-to-live - how long the upload token is valid for.'
    )


class VideoCreatePayload(BaseModel):
    description: Optional[str] = Field(
        None,
        description='A brief description of your video.',
        examples=['A video about string theory.'],
    )
    metadata: Optional[List[Metadata]] = Field(
        None,
        description='A list of key value pairs that you use to provide metadata for your video. These pairs can be made dynamic, allowing you to segment your audience. Read more on [dynamic metadata](https://api.video/blog/endpoints/dynamic-metadata).',
        examples=['[{"key": "Author", "value": "John Doe"}]'],
    )
    mp4Support: Optional[bool] = Field(
        True,
        description='Enables mp4 version in addition to streamed version.',
        examples=[True],
    )
    panoramic: Optional[bool] = Field(
        False,
        description='Indicates if your video is a 360/immersive video.',
        examples=[False],
    )
    playerId: Optional[str] = Field(
        None,
        description='The unique identification number for your video player.',
        examples=['pl45KFKdlddgk654dspkze'],
    )
    public: Optional[bool] = Field(
        True,
        description='Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).',
        examples=[True],
    )
    publishedAt: Optional[datetime] = Field(
        None,
        description='The API uses ISO-8601 format for time, and includes 3 places for milliseconds.',
        examples=['2020-07-14T23:36:18.598Z'],
    )
    source: Optional[str] = Field(
        None,
        description='If you add a video already on the web, this is where you enter the url for the video.',
        examples=['https://www.myvideo.url.com/video.mp4'],
    )
    tags: Optional[List[str]] = Field(
        None,
        description='A list of tags you want to use to describe your video.',
        examples=['["maths", "string theory", "video"]'],
    )
    title: str = Field(
        ..., description='The title of your new video.', examples=['Maths video']
    )


class VideoThumbnailPickPayload(BaseModel):
    timecode: constr(pattern=r'00:00:00.00') = Field(
        ...,
        description='Frame in video to be used as a placeholder before the video plays. \nExample: \'"00:01:00.000" for 1 minute into the video.\'\nValid Patterns: \n"hh:mm:ss.ms"\n"hh:mm:ss:frameNumber"\n"124" (integer value is reported as seconds) \nIf selection is out of range, "00:00:00.00" will be chosen.',
    )


class VideoThumbnailUploadPayload(BaseModel):
    file: bytes = Field(..., description='The image to be added as a thumbnail.')


class VideoUpdatePayload(BaseModel):
    description: Optional[str] = Field(
        None,
        description='A brief description of the video.',
        examples=['A film about good books.'],
    )
    metadata: Optional[List[Metadata]] = Field(
        None,
        description='A list (array) of dictionaries where each dictionary contains a key value pair that describes the video. As with tags, you must send the complete list of metadata you want as whatever you send here will overwrite the existing metadata for the video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair.',
    )
    mp4Support: Optional[bool] = Field(
        None, description='Whether the player supports the mp4 format.', examples=[True]
    )
    panoramic: Optional[bool] = Field(
        None,
        description='Whether the video is a 360 degree or immersive video.',
        examples=[False],
    )
    playerId: Optional[str] = Field(
        None,
        description='The unique ID for the player you want to associate with your video.',
        examples=['pl4k0jvEUuaTdRAEjQ4Jfrgz'],
    )
    public: Optional[bool] = Field(
        None,
        description='Whether the video is publicly available or not. False means it is set to private. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).',
        examples=[True],
    )
    tags: Optional[List[str]] = Field(
        None,
        description='A list of terms or words you want to tag the video with. Make sure the list includes all the tags you want as whatever you send in this list will overwrite the existing list for the video.',
        examples=['["maths", "string theory", "video"]'],
    )
    title: Optional[str] = Field(
        None, description='The title you want to use for your video.'
    )


class VideoUploadPayload(BaseModel):
    file: bytes = Field(
        ...,
        description='The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the "/videos" endpoint and add the "source" parameter when you create a new video.',
        examples=['@/path/to/video.mp4'],
    )


class VideoAssets(BaseModel):
    hls: Optional[AnyUrl] = Field(
        None,
        description='This is the manifest URL. For HTTP Live Streaming (HLS), when a HLS video stream is initiated, the first file to download is the manifest. This file has the extension M3U8, and provides the video player with information about the various bitrates available for streaming.',
    )
    iframe: Optional[str] = Field(
        None,
        description='Code to use video from a third party website',
        examples=[
            '<iframe src="//embed.api.video/c188ed58-3403-46a2-b91b-44603d10b2c9?token=831a9bd9-9f50-464c-a369-8e9d914371ae" width="100%" height="100%" frameborder="0" scrolling="no" allowfullscreen=""></iframe>'
        ],
    )
    mp4: Optional[AnyUrl] = Field(
        None,
        description='Available only if mp4Support is enabled. Raw mp4 url.',
        examples=[
            'https://cdn.api.video/vod/vi4k0jvEUuaTdRAEjQ4Jfrgz/token/8fd70443-d9f0-45d2-b01c-12c8cfc707c9/mp4/720/source.mp4'
        ],
    )
    player: Optional[AnyUrl] = Field(
        None,
        description='Raw url of the player.',
        examples=[
            'https://embed.api.video/1b9d6ae8-8f57-4b6d-8552-d636926b4f5f?token=831a9bd9-9f50-464c-a369-8e9d914371ae'
        ],
    )
    thumbnail: Optional[AnyUrl] = Field(
        None,
        description='Poster of the video.',
        examples=[
            'https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/thumbnail.jpg'
        ],
    )


class VideoSessionClient(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The name of the browser used to view the video session.',
        examples=['Firefox'],
    )
    type: Optional[str] = Field(
        None,
        description='The type of client used to view the video session.',
        examples=['browser'],
    )
    version: Optional[str] = Field(
        None,
        description='The version of the browser used to view the video session.',
        examples=['67.0'],
    )


class VideoSessionDevice(BaseModel):
    model: Optional[str] = Field(
        None,
        description='The specific model of the device, if known.',
        examples=['unknown'],
    )
    type: Optional[str] = Field(
        None,
        description='What the type is like desktop, laptop, mobile.',
        examples=['desktop'],
    )
    vendor: Optional[str] = Field(
        None,
        description='If known, what the brand of the device is, like Apple, Dell, etc.',
        examples=['Dell'],
    )


class VideoSessionLocation(BaseModel):
    city: Optional[str] = Field(
        None, description='The city of the viewer.', examples=['Paris']
    )
    country: Optional[str] = Field(
        None, description='The country of the viewer.', examples=['France']
    )


class VideoSessionOs(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The name of the operating system.',
        examples=['Microsoft Windows'],
    )
    shortname: Optional[str] = Field(
        None,
        description='The nickname for the operating system, often representing the version.',
        examples=['W10'],
    )
    version: Optional[str] = Field(
        None,
        description='The version of the operating system.',
        examples=['Windows 10'],
    )


class VideoSessionReferrer(BaseModel):
    medium: Optional[str] = Field(
        None,
        description='How they arrived at the site, for example organic or paid. Organic meaning they found it themselves and paid meaning they followed a link from an advertisement.',
        examples=['organic'],
    )
    searchTerm: Optional[str] = Field(
        None, description='The search term they typed to arrive at the video session.'
    )
    source: Optional[str] = Field(
        None,
        description='The source the referrer came from to the video session. For example if they searched through google to find the stream.',
        examples=['https://google.com'],
    )
    url: Optional[str] = Field(
        None,
        description='The link the viewer used to reach the video session.',
        examples=['https://api.video'],
    )


class VideoSessionSession(BaseModel):
    endedAt: Optional[datetime] = Field(
        None,
        description='When the video session ended, presented in ISO-8601 format.',
        examples=['2019-06-24T12:45:01.109+00'],
    )
    loadedAt: Optional[datetime] = Field(
        None,
        description='When the video session started, presented in ISO-8601 format.',
        examples=['2019-06-24T11:45:01.109+00'],
    )
    sessionId: Optional[str] = Field(
        None,
        description='The unique identifier for the session that you can use to track what happens during it.',
        examples=['psEmFwGQUAXR2lFHj5nDOpy'],
    )


class VideoSourceLiveStreamLink(BaseModel):
    rel: Optional[str] = None
    uri: Optional[str] = None


class VideostatusEncodingMetadata(BaseModel):
    aspectRatio: Optional[str] = None
    audioCodec: Optional[str] = Field(
        None,
        description='The method used to compress and decompress digital audio for your video.',
    )
    bitrate: Optional[float] = Field(
        None, description='The number of bits processed per second.'
    )
    duration: Optional[int] = Field(None, description='The length of the video.')
    framerate: Optional[int] = Field(
        None,
        description='The frequency with which consecutive images or frames appear on a display. Shown in this API as frames per second (fps).',
        examples=[60],
    )
    height: Optional[int] = Field(
        None, description='The height of the video in pixels.'
    )
    samplerate: Optional[int] = Field(
        None,
        description='How many samples per second a digital audio system uses to record an audio signal. The higher the rate, the higher the frequencies that can be recorded. They are presented in this API using hertz.',
        examples=[48000],
    )
    videoCodec: Optional[str] = Field(
        None,
        description='The method used to compress and decompress digital video. API Video supports all codecs in the libavcodec library. ',
    )
    width: Optional[int] = Field(None, description='The width of the video in pixels.')


class Status1(Enum):
    missing = 'missing'
    uploading = 'uploading'
    uploaded = 'uploaded'


class VideostatusIngest(BaseModel):
    filesize: Optional[int] = Field(
        None, description='The size of your file in bytes.', examples=[200000]
    )
    receivedBytes: Optional[List[BytesRange]] = Field(
        None,
        description='The total number of bytes received, listed for each chunk of the upload.',
    )
    status: Optional[Status1] = Field(
        None,
        description='There are three possible ingest statuses. missing - you are missing information required to ingest the video. uploading - the video is in the process of being uploaded. uploaded - the video is ready for use.',
        examples=['uploaded'],
    )


class Webhook(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When an webhook was created, presented in ISO-8601 format.',
        examples=['2019-06-24T11:45:01.109+00'],
    )
    events: Optional[List[str]] = Field(
        None,
        description='A list of events that will trigger the webhook.',
        examples=['["video.encoding.quality.completed"]'],
    )
    url: Optional[str] = Field(
        None,
        description='URL of the webhook',
        examples=['http://clientnotificationserver.com/notif?myquery=query'],
    )
    webhookId: Optional[str] = Field(
        None,
        description='Unique identifier of the webhook',
        examples=['webhook_XXXXXXXXXXXXXXX'],
    )


class WebhooksCreatePayload(BaseModel):
    events: List[str] = Field(
        ...,
        description='A list of the webhooks that you are subscribing to. There are Currently four webhook options:\n* ```video.encoding.quality.completed```  When a new video is uploaded into your account, it will be encoded into several different HLS sizes/bitrates.  When each version is encoded, your webhook will get a notification.  It will look like ```{ \\"type\\": \\"video.encoding.quality.completed\\", \\"emittedAt\\": \\"2021-01-29T16:46:25.217+01:00\\", \\"videoId\\": \\"viXXXXXXXX\\", \\"encoding\\": \\"hls\\", \\"quality\\": \\"720p\\"} ```. This request says that the 720p HLS encoding was completed.\n* ```live-stream.broadcast.started```  When a livestream begins broadcasting, the broadcasting parameter changes from false to true, and this webhook fires.\n* ```live-stream.broadcast.ended```  This event fores when the livestream has finished broadcasting, and the broadcasting parameter flips from false to true.\n* ```video.source.recorded```  This event is similar to ```video.encoding.quality.completed```, but tells you if a livestream has been recorded as a VOD.',
        examples=['video.encoding.quality.completed'],
    )
    url: str = Field(
        ...,
        description='The the url to which HTTP notifications are sent. It could be any http or https URL.',
        examples=['https://example.com/webhooks'],
    )


class Metadata1(RootModel[List[str]]):
    root: List[str]


class SortOrder(Enum):
    asc = 'asc'
    desc = 'desc'


class SortBy(Enum):
    createdAt = 'createdAt'
    updatedAt = 'updatedAt'


class PlayersPlayerIdLogoDeleteResponse(BaseModel):
    pass


class SortBy2(Enum):
    createdAt = 'createdAt'
    ttl = 'ttl'


class Tags(RootModel[List[str]]):
    root: List[str]


class LiveStream(BaseModel):
    assets: Optional[LiveStreamAssets] = None
    broadcasting: Optional[bool] = Field(
        None,
        description='Whether or not you are broadcasting the live video you recorded for others to see. True means you are broadcasting to viewers, false means you are not.',
        examples=[True],
    )
    liveStreamId: Optional[str] = Field(
        None,
        description='The unique identifier for the live stream. Live stream IDs begin with "li."',
        examples=['li400mYKSgQ6xs7taUeSaEKr'],
    )
    name: Optional[str] = Field(
        None, description='The name of your live stream.', examples=['My Live Stream']
    )
    playerId: Optional[str] = Field(
        None,
        description='The unique identifier for the player.',
        examples=['pl45d5vFFGrfdsdsd156dGhh'],
    )
    public: Optional[bool] = Field(
        None,
        description='BETA FEATURE Please limit all public = false ("private") livestreams to 3,000 users. Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view.',
        examples=[True],
    )
    record: Optional[bool] = Field(
        None, description='Whether you are recording or not.', examples=[True]
    )
    streamKey: Optional[str] = Field(
        None,
        description='The unique, private stream key that you use to begin streaming.',
        examples=['cc1b4df0-d1c5-4064-a8f9-9f0368385135'],
    )


class LiveStreamSession(BaseModel):
    client: Optional[LiveStreamSessionClient] = None
    device: Optional[LiveStreamSessionDevice] = None
    location: Optional[LiveStreamSessionLocation] = None
    os: Optional[VideoSessionOs] = None
    referrer: Optional[LiveStreamSessionReferrer] = None
    session: Optional[LiveStreamSessionSession] = None


class Pagination(BaseModel):
    currentPage: Optional[int] = Field(None, description='The current page index.')
    currentPageItems: Optional[int] = Field(
        None, description='The number of items on the current page.'
    )
    itemsTotal: Optional[int] = Field(
        None, description='Total number of items that exist.'
    )
    links: List[PaginationLink]
    pageSize: Optional[int] = Field(
        None, description='Maximum number of item per page.'
    )
    pagesTotal: Optional[int] = Field(
        None, description='Number of items listed in the current page.'
    )


class Player(Playerinput):
    assets: Optional[Assets] = None
    createdAt: Optional[datetime] = Field(
        None,
        description='When the player was created, presented in ISO-8601 format.',
        examples=['2020-01-31T10:17:47+00:00'],
    )
    linkActive: Optional[str] = Field(None, description='Deprecated')
    playerId: Optional[str] = Field(None, examples=['pl45KFKdlddgk654dspkze'])
    shapeAspect: Optional[str] = Field(None, description='Deprecated')
    shapeBackgroundBottom: Optional[str] = Field(None, description='Deprecated')
    shapeBackgroundTop: Optional[str] = Field(None, description='Deprecated')
    shapeMargin: Optional[int] = Field(None, description='Deprecated')
    shapeRadius: Optional[int] = Field(None, description='Deprecated')
    updatedAt: Optional[datetime] = Field(
        None,
        description='When the player was last updated, presented in ISO-8601 format.',
        examples=['2020-01-31T10:18:47+00:00'],
    )


PlayerCreationPayload = Playerinput


PlayerUpdatePayload = Playerinput


class PlayersListResponse(BaseModel):
    data: Optional[List[Player]] = None
    pagination: Optional[Pagination] = None


class RawStatisticsListLiveStreamAnalyticsResponse(BaseModel):
    data: Optional[List[LiveStreamSession]] = None
    pagination: Optional[Pagination] = None


class RawStatisticsListPlayerSessionEventsResponse(BaseModel):
    data: Optional[List[PlayerSessionEvent]] = None
    pagination: Optional[Pagination] = None


class TokenListResponse(BaseModel):
    data: List[UploadToken] = Field(..., title='uploadToken')
    pagination: Pagination


class VideoSession(BaseModel):
    client: Optional[VideoSessionClient] = None
    device: Optional[VideoSessionDevice] = None
    location: Optional[VideoSessionLocation] = None
    os: Optional[VideoSessionOs] = None
    referrer: Optional[VideoSessionReferrer] = None
    session: Optional[VideoSessionSession] = None


class VideoSourceLiveStream(BaseModel):
    links: Optional[List[VideoSourceLiveStreamLink]] = None
    liveStreamId: Optional[str] = Field(
        None,
        description='The unique identifier for the live stream.',
        examples=['li400mYKSgQ6xs7taUeSaEKr'],
    )


class VideostatusEncoding(BaseModel):
    metadata: Optional[VideostatusEncodingMetadata] = None
    playable: Optional[bool] = Field(
        None, description='Whether the video is playable or not.', examples=[True]
    )
    qualities: Optional[List[Quality]] = Field(
        None, description='Available qualities the video can be viewed in.'
    )


class WebhooksListResponse(BaseModel):
    data: Optional[List[Webhook]] = None
    pagination: Optional[Pagination] = None


class CaptionsListResponse(BaseModel):
    data: Optional[List[Subtitle]] = None
    pagination: Optional[Pagination] = None


class ChaptersListResponse(BaseModel):
    data: Optional[List[Chapter]] = None
    pagination: Optional[Pagination] = None


class LiveStreamListResponse(BaseModel):
    data: List[LiveStream]
    pagination: Pagination


class RawStatisticsListSessionsResponse(BaseModel):
    data: Optional[List[VideoSession]] = None
    pagination: Optional[Pagination] = None


class VideoSource(BaseModel):
    liveStream: Optional[VideoSourceLiveStream] = None
    type: Optional[str] = None
    uri: Optional[str] = Field(
        None,
        description='The URL where the video is stored.',
        examples=['/videos/vi4k0jvEUuaTdRAEjQ4Prklg/source'],
    )


class Videostatus(BaseModel):
    encoding: Optional[VideostatusEncoding] = None
    ingest: Optional[VideostatusIngest] = None


class Video(BaseModel):
    assets: Optional[VideoAssets] = None
    description: Optional[str] = Field(
        None,
        description='A description for the video content.\n',
        examples=['An amazing video explaining string theory.'],
    )
    metadata: Optional[List[Metadata]] = Field(
        None,
        description='Metadata you can use to categorise and filter videos. Metadata is a list of dictionaries, where each dictionary represents a key value pair for categorising a video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair.\n',
        examples=[
            '[{"key":"Author", "value":"John Doe"}, {"key":"Format", "value":"Tutorial"}]'
        ],
    )
    mp4Support: Optional[bool] = Field(
        None,
        description='This lets you know whether mp4 is supported. If enabled, an mp4 URL will be provided in the response for the video.\n',
        examples=[True],
    )
    panoramic: Optional[bool] = Field(
        None, description='Defines if video is panoramic.\n', examples=[False]
    )
    playerId: Optional[str] = Field(
        None,
        description='The id of the player that will be applied on the video.\n',
        examples=['pl45KFKdlddgk654dspkze'],
    )
    public: Optional[bool] = Field(
        None,
        description='Defines if the content is publicly reachable or if a unique token is needed for each play session. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).\n',
        examples=[False],
    )
    publishedAt: Optional[str] = Field(
        None,
        description='The date and time the API created the video. Date and time are provided using ISO-8601 UTC format.',
        examples=['2019-12-16T08:25:51+00:00'],
    )
    source: Optional[VideoSource] = None
    tags: Optional[List] = Field(
        None,
        description='One array of tags (each tag is a string) in order to categorize a video. Tags may include spaces. \n',
        examples=['"tags": ["maths", "string theory", "video"]'],
    )
    title: Optional[str] = Field(
        None, description='The title of the video content.\n', examples=['Maths video']
    )
    updatedAt: Optional[datetime] = Field(
        None,
        description='The date and time the video was updated. Date and time are provided using ISO-8601 UTC format.',
        examples=['2019-12-16T08:25:51+00:10'],
    )
    videoId: Optional[str] = Field(
        None,
        description='The unique identifier of the video object.',
        examples=['vi4k0jvEUuaTdRAEjQ4Prklg'],
    )


class VideosListResponse(BaseModel):
    data: List[Video]
    pagination: Pagination


BadRequest.model_rebuild()
