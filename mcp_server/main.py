# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:35:34+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBearer
from fastapi import Header, Path, Query, UploadFile
from pydantic import constr

from models import (
    AccessToken,
    Account,
    AuthenticatePayload,
    BadRequest,
    CaptionsListResponse,
    CaptionsUpdatePayload,
    Chapter,
    ChaptersListResponse,
    LiveStream,
    LiveStreamCreatePayload,
    LiveStreamListResponse,
    LiveStreamUpdatePayload,
    Metadata1,
    NotFound,
    Player,
    PlayerCreationPayload,
    PlayersListResponse,
    PlayersPlayerIdLogoDeleteResponse,
    PlayerUpdatePayload,
    RawStatisticsListLiveStreamAnalyticsResponse,
    RawStatisticsListPlayerSessionEventsResponse,
    RawStatisticsListSessionsResponse,
    RefreshTokenPayload,
    SortBy,
    SortBy2,
    SortOrder,
    Subtitle,
    Tags,
    TokenCreatePayload,
    TokenListResponse,
    UploadToken,
    Video,
    VideoCreatePayload,
    VideosListResponse,
    Videostatus,
    VideoThumbnailPickPayload,
    VideoUpdatePayload,
    Webhook,
    WebhooksCreatePayload,
    WebhooksListResponse,
)

app = MCPProxy(
    description='api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.',
    title='api.video',
    version='1',
    servers=[{'url': 'https://ws.api.video'}],
)


@app.get(
    '/account',
    description=""" Deprecated. Authenticate and get a token, then you can use the bearer token here to retrieve details about your account. """,
    tags=['account_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def g_e_t_account():
    """
    Show account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/analytics/live-streams/{liveStreamId}',
    tags=['live_stream_management', 'live_stream_analytics'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def g_e_t_analytics_live_streams_live_stream_id(
    live_stream_id: str = Path(..., alias='liveStreamId'),
    period: Optional[str] = None,
    current_page: Optional[int] = Query(1, alias='currentPage'),
    page_size: Optional[int] = Query(25, alias='pageSize'),
):
    """
    List live stream player sessions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/analytics/sessions/{sessionId}/events',
    description=""" Useful to track and measure video's engagement. """,
    tags=['live_stream_analytics'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def g_e_t_analytics_sessions_session_id_events(
    session_id: str = Path(..., alias='sessionId'),
    current_page: Optional[int] = Query(1, alias='currentPage'),
    page_size: Optional[int] = Query(25, alias='pageSize'),
):
    """
    List player session events
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/analytics/videos/{videoId}',
    description=""" Retrieve all available user sessions for a specific video. Tutorials that use the [analytics endpoint](https://api.video/blog/endpoints/analytics). """,
    tags=['live_stream_analytics', 'video_content_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def g_e_t_analytics_videos_video_id(
    video_id: str = Path(..., alias='videoId'),
    period: Optional[str] = None,
    metadata: Optional[Metadata1] = None,
    current_page: Optional[int] = Query(1, alias='currentPage'),
    page_size: Optional[int] = Query(25, alias='pageSize'),
):
    """
    List video player sessions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/auth/api-key',
    description=""" To get started, submit your API key in the body of your request. api.video returns an access token that is valid for one hour (3600 seconds). A refresh token is also returned. View a [tutorial](https://api.video/blog/tutorials/authentication-tutorial) on authentication.
All tutorials using the [authentication endpoint](https://api.video/blog/endpoints/authenticate) """,
    tags=['account_management'],
)
def p_o_s_t_auth_api_key(body: AuthenticatePayload = None):
    """
    Authenticate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/auth/refresh',
    description=""" Use the refresh endpoint with the refresh token you received when you first authenticated using the api-key endpoint. Send the refresh token in the body of your request. The api.video API returns a new access token that is valid for one hour (3600 seconds) and a new refresh token. 
 """,
    tags=['account_management'],
)
def p_o_s_t_auth_refresh(body: RefreshTokenPayload = None):
    """
    Refresh token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/live-streams',
    description=""" With no parameters added to the url, this will return all livestreams. Query by name or key to limit the list. """,
    tags=['live_stream_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def g_e_t_live_streams(
    stream_key: Optional[str] = Query(None, alias='streamKey'),
    name: Optional[str] = None,
    sort_by: Optional[str] = Query(None, alias='sortBy'),
    sort_order: Optional[SortOrder] = Query(None, alias='sortOrder'),
    current_page: Optional[int] = Query(1, alias='currentPage'),
    page_size: Optional[int] = Query(25, alias='pageSize'),
):
    """
    List all live streams
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/live-streams',
    description=""" A live stream will give you the 'connection point' to RTMP your video stream to api.video. It will also give you the details for viewers to watch the same livestream.  The public=false 'private livestream' is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer. See our [Live Stream Tutorial](https://api.video/blog/tutorials/live-stream-tutorial) for a walkthrough of this API with OBS. Your RTMP endpoint for the livestream is rtmp://broadcast.api.video/s/{streamKey}
Tutorials that [create live streams](https://api.video/blog/endpoints/live-create). """,
    tags=['live_stream_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def p_o_s_t_live_streams(body: LiveStreamCreatePayload = None):
    """
    Create live stream
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/live-streams/{liveStreamId}',
    tags=['live_stream_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def d_e_l_e_t_e_live_streams_live_stream_id(
    live_stream_id: str = Path(..., alias='liveStreamId')
):
    """
    Delete a live stream
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/live-streams/{liveStreamId}',
    description=""" Supply a LivestreamId, and you'll get all the details for streaming into, and watching the livestream. Tutorials that use the [show livestream endpoint](https://api.video/blog/endpoints/live-stream-status). """,
    tags=['live_stream_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def g_e_t_live_streams_live_stream_id(
    live_stream_id: str = Path(..., alias='liveStreamId')
):
    """
    Show live stream
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/live-streams/{liveStreamId}',
    description=""" Use this endpoint to update the player, or to turn recording on/off (saving a copy of the livestream). NOTE: If the livestream is actively streaming, changing the recording status will only affect the NEXT stream.    The public=false 'private livestream' is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer. """,
    tags=['live_stream_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def p_a_t_c_h_live_streams_live_stream_id(
    live_stream_id: str = Path(..., alias='liveStreamId'),
    body: LiveStreamUpdatePayload = None,
):
    """
    Update a live stream
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/live-streams/{liveStreamId}/thumbnail',
    description=""" Send the unique identifier for a live stream to delete it from the system. """,
    tags=['thumbnail_operations', 'live_stream_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def d_e_l_e_t_e_live_streams_live_stream_id_thumbnail(
    live_stream_id: str = Path(..., alias='liveStreamId')
):
    """
    Delete a thumbnail
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/live-streams/{liveStreamId}/thumbnail',
    description=""" Upload an image to use as a backdrop for your livestream. Tutorials that [update live stream thumbnails](https://api.video/blog/endpoints/live-upload-a-thumbnail). """,
    tags=['thumbnail_operations', 'live_stream_management', 'video_upload_process'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def p_o_s_t_live_streams_live_stream_id_thumbnail(
    live_stream_id: str = Path(..., alias='liveStreamId'), file: UploadFile = ...
):
    """
    Upload a thumbnail
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/players',
    description=""" Retrieve a list of all the players you created, as well as details about each one.
Tutorials that use the [player endpoint](https://api.video/blog/endpoints/player). """,
    tags=['player_profile_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def g_e_t_players(
    sort_by: Optional[SortBy] = Query(None, alias='sortBy'),
    sort_order: Optional[SortOrder] = Query(None, alias='sortOrder'),
    current_page: Optional[int] = Query(1, alias='currentPage'),
    page_size: Optional[int] = Query(25, alias='pageSize'),
):
    """
    List all players
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/players',
    description=""" Create a player for your video, and customise it. """,
    tags=['player_profile_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def p_o_s_t_players(body: PlayerCreationPayload):
    """
    Create a player
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/players/{playerId}',
    description=""" Delete a player if you no longer need it. You can delete any player that you have the player ID for. """,
    tags=['player_profile_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def d_e_l_e_t_e_players_player_id(player_id: str = Path(..., alias='playerId')):
    """
    Delete a player
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/players/{playerId}',
    description=""" Use a player ID to retrieve details about the player and display it for viewers. """,
    tags=['player_profile_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def g_e_t_players_player_id(player_id: str = Path(..., alias='playerId')):
    """
    Show a player
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/players/{playerId}',
    description=""" Use a player ID to update specific details for a player. NOTE: It may take up to 10 min before the new player configuration is available from our CDN. """,
    tags=['player_profile_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def p_a_t_c_h_players_player_id(
    player_id: str = Path(..., alias='playerId'), body: PlayerUpdatePayload = ...
):
    """
    Update a player
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/players/{playerId}/logo',
    tags=['player_profile_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def d_e_l_e_t_e_players_player_id_logo(player_id: str = Path(..., alias='playerId')):
    """
    Delete logo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/players/{playerId}/logo',
    description=""" The uploaded image maximum size should be 200x100 and its weight should be 200KB.  It will be scaled down to 30px height and converted to PNG to be displayed in the player. """,
    tags=['player_profile_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def p_o_s_t_players_player_id_logo(
    player_id: str = Path(..., alias='playerId'), file: UploadFile = ...
):
    """
    Upload a logo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/upload',
    description=""" When given a token, anyone can upload a file to the URI `https://ws.api.video/upload?token=<tokenId>`.

Example with cURL:

```curl
$ curl  --request POST --url 'https://ws.api.video/upload?token=toXXX'
 --header 'content-type: multipart/form-data'
 -F file=@video.mp4
```

Or in an HTML form, with a little JavaScript to convert the form into JSON:
```html
<!--form for user interaction-->
<form name="videoUploadForm" >
  <label for=video>Video:</label>
  <input type=file name=source/><br/>
  <input value="Submit" type="submit">
</form>
<div></div>
<!--JS takes the form data 
    uses FormData to turn the response into JSON.
    then uses POST to upload the video file.
    Update the token parameter in the url to your upload token.
    -->
<script>
   var form = document.forms.namedItem("videoUploadForm");	
   form.addEventListener('submit', function(ev) {
	 ev.preventDefault();
     var oOutput = document.querySelector("div"),
         oData = new FormData(form);
     var oReq = new XMLHttpRequest();
	 
     oReq.open("POST", "https://ws.api.video/upload?token=toXXX", true);
     oReq.send(oData);
	 oReq.onload = function(oEvent) {
       if (oReq.status ==201) {
         oOutput.innerHTML = "Your video is uploaded!<br/>"  + oReq.response;
       } else {
         oOutput.innerHTML = "Error " + oReq.status + " occurred when trying to upload your file.<br \/>";
       }
     };
   }, false);	
</script>
```


### Dealing with large files

We have created a <a href='https://api.video/blog/tutorials/uploading-large-files-with-javascript'>tutorial</a> to walk through the steps required. """,
    tags=['upload_token_operations', 'video_upload_process'],
)
def p_o_s_t_upload(
    token: str,
    content__range: Optional[constr(pattern=r'^bytes [0-9]*-[0-9]*\/[0-9]*$')] = Header(
        None, alias='Content-Range'
    ),
    file: UploadFile = ...,
):
    """
    Upload with an upload token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/upload-tokens',
    description=""" A delegated token is used to allow secure uploads without exposing your API key. Use this endpoint to retrieve a list of all currently active delegated tokens.
Tutorials using [delegated upload](https://api.video/blog/endpoints/delegated-upload). """,
    tags=['upload_token_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def g_e_t_upload_tokens(
    sort_by: Optional[SortBy2] = Query(None, alias='sortBy'),
    sort_order: Optional[SortOrder] = Query(None, alias='sortOrder'),
    current_page: Optional[int] = Query(1, alias='currentPage'),
    page_size: Optional[int] = Query(25, alias='pageSize'),
):
    """
    List all active upload tokens.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/upload-tokens',
    description=""" Use this endpoint to generate an upload token. You can use this token to authenticate video uploads while keeping your API key safe. Tutorials using [delegated upload](https://api.video/blog/endpoints/delegated-upload). """,
    tags=['upload_token_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def p_o_s_t_upload_tokens(body: TokenCreatePayload = None):
    """
    Generate an upload token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/upload-tokens/{uploadToken}',
    description=""" Delete an existing upload token. This is especially useful for tokens you may have created that do not expire. """,
    tags=['upload_token_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def d_e_l_e_t_e_upload_tokens_upload_token(
    upload_token: str = Path(..., alias='uploadToken')
):
    """
    Delete an upload token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/upload-tokens/{uploadToken}',
    description=""" You can retrieve details about a specific upload token if you have the unique identifier for the upload token. Add it in the path of the endpoint. Details include time-to-live (ttl), when the token was created, and when it will expire. """,
    tags=['upload_token_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def g_e_t_upload_tokens_upload_token(
    upload_token: str = Path(..., alias='uploadToken')
):
    """
    Show upload token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/videos',
    description=""" Requests to this endpoint return a list of your videos (with all their details). With no parameters added to this query, the API returns all videos. You can filter what videos the API returns using the parameters described below.  We have [several tutorials](https://api.video/blog/endpoints/video-list) that demonstrate this endpoint. """,
    tags=['video_content_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def l_i_s_t_videos(
    title: Optional[str] = None,
    tags: Optional[Tags] = None,
    metadata: Optional[Metadata1] = None,
    description: Optional[str] = None,
    live_stream_id: Optional[str] = Query(None, alias='liveStreamId'),
    sort_by: Optional[str] = Query(None, alias='sortBy'),
    sort_order: Optional[str] = Query(None, alias='sortOrder'),
    current_page: Optional[int] = Query(1, alias='currentPage'),
    page_size: Optional[int] = Query(25, alias='pageSize'),
):
    """
    List all videos
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/videos',
    description=""" To create a video, you create its container&parameters first, before adding the video file (exception - when using an existing HTTP source).
* Videos are public by default. [Learn about Private videos](https://api.video/blog/tutorials/tutorial-private-videos)
* Up to 6 responsive video streams will be created (from 240p to 4k)
* Mp4 encoded versions are created at the highest quality (max 1080p) by default.
* Panoramic videos are for videos recorded in 360 degrees.  You can toggle this after your 360 video upload.
* Searchable parameters: title, description, tags and metadata

 ```shell
$ curl https://ws.api.video/videos \ -H 'Authorization: Bearer {access_token} \ -d '{"title":"My video", 
     "description":"so many details",
     "mp4Support":true
}'
```  

## add an URL to upload on creation
You can also create a video directly from a video hosted on a third-party server by giving its URI in `source` parameter:
```shell
$ curl https://ws.api.video/videos \
-H 'Authorization: Bearer {access_token} \
-d '{"source":"http://uri/to/video.mp4", "title":"My video"}'
```

In this case, the service will respond `202 Accepted` and ingest the video asynchronously.
## Track users with Dynamic Metadata
Metadata values can be a key:value where the values are predefined, but Dynamic metadata allows you to enter *any* value for a defined key.  To defined a dynamic metadata pair use:
``` "metadata":[{"dynamicKey": "__dynamicKey__"}] ```

The double underscore on both sides of the value allows any variable to be added for a given video session. Added the the url you might have:
``` <iframe type="text/html" src="https://embed.api.video/vod/vi6QvU9dhYCzW3BpPvPsZUa8?metadata[classUserName]=Doug" width="960" height="320" frameborder="0" scrollling="no"></iframe> ```


This video session will be tagged as watched by Doug - allowing for in-depth analysis on how each viewer interacts with the videos.
### We have tutorials on:
* [Creating and uploading videos](https://api.video/blog/tutorials/video-upload-tutorial)
* [Uploading large videos](https://api.video/blog/tutorials/video-upload-tutorial-large-videos)


* [Using tags with videos](https://api.video/blog/tutorials/video-tagging-best-practices)
* [Private videos](https://api.video/blog/tutorials/tutorial-private-videos)
* [Using Dynamic Metadata](https://api.video/blog/tutorials/dynamic-metadata)

* Full list of [tutorials](https://api.video/blog/endpoints/video-create) that demonstrate this endpoint.
 """,
    tags=['video_content_management', 'video_upload_process'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def p_o_s_t_video(body: VideoCreatePayload = None):
    """
    Create a video
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/videos/{videoId}',
    description=""" If you do not need a video any longer, you can send a request to delete it. All you need is the videoId. Tutorials using [video deletion](https://api.video/blog/endpoints/video-delete). """,
    tags=['video_content_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def d_e_l_e_t_e_video(video_id: str = Path(..., alias='videoId')):
    """
    Delete a video
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/videos/{videoId}',
    description=""" This call provides the same JSON information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL. Tutorials using [video GET](https://api.video/blog/endpoints/video-get). """,
    tags=['video_content_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def g_e_t_video(video_id: str = Path(..., alias='videoId')):
    """
    Show a video
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/videos/{videoId}',
    description=""" Use this endpoint to update the parameters associated with your video. The video you are updating is determined by the video ID you provide in the path. For each parameter you want to update, include the update in the request body. NOTE: If you are updating an array, you must provide the entire array as what you provide here overwrites what is in the system rather than appending to it. Tutorials using [video update](https://api.video/blog/endpoints/video-update). """,
    tags=['video_content_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def p_a_t_c_h_video(
    video_id: str = Path(..., alias='videoId'), body: VideoUpdatePayload = None
):
    """
    Update a video
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/videos/{videoId}/captions',
    description=""" Retrieve a list of available captions for the videoId you provide. """,
    tags=['caption_management', 'video_content_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def g_e_t_videos_video_id_captions(
    video_id: str = Path(..., alias='videoId'),
    current_page: Optional[int] = Query(1, alias='currentPage'),
    page_size: Optional[int] = Query(25, alias='pageSize'),
):
    """
    List video captions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/videos/{videoId}/captions/{language}',
    description=""" Delete a caption in a specific language by providing the video ID for the video you want to delete the caption from and the language the caption is in. """,
    tags=['caption_management', 'video_content_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def d_e_l_e_t_e_videos_video_id_captions_language(
    video_id: str = Path(..., alias='videoId'), language: str = ...
):
    """
    Delete a caption
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/videos/{videoId}/captions/{language}',
    description=""" Display a caption for a video in a specific language. If the language is available, the caption is returned. Otherwise, you will get a response indicating the caption was not found.
Tutorials that use the [captions endpoint](https://api.video/blog/endpoints/captions). """,
    tags=['caption_management', 'video_content_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def g_e_t_videos_video_id_captions_language(
    video_id: str = Path(..., alias='videoId'), language: str = ...
):
    """
    Show a caption
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/videos/{videoId}/captions/{language}',
    description=""" To have the captions on automatically, use this PATCH to set default: true. """,
    tags=['caption_management', 'video_content_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def p_a_t_c_h_videos_video_id_captions_language(
    video_id: str = Path(..., alias='videoId'),
    language: str = ...,
    body: CaptionsUpdatePayload = None,
):
    """
    Update caption
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/videos/{videoId}/captions/{language}',
    description=""" Upload a VTT file to add captions to your video.
 Read our [captioning tutorial](https://api.video/blog/tutorials/adding-captions) for more details. """,
    tags=['caption_management', 'video_content_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def p_o_s_t_videos_video_id_captions_language(
    video_id: str = Path(..., alias='videoId'),
    language: str = ...,
    file: UploadFile = ...,
):
    """
    Upload a caption
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/videos/{videoId}/chapters',
    description=""" Retrieve a list of all chapters for a specified video. """,
    tags=['video_chapter_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def g_e_t_videos_video_id_chapters(
    video_id: str = Path(..., alias='videoId'),
    current_page: Optional[int] = Query(1, alias='currentPage'),
    page_size: Optional[int] = Query(25, alias='pageSize'),
):
    """
    List video chapters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/videos/{videoId}/chapters/{language}',
    tags=['video_chapter_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def d_e_l_e_t_e_videos_video_id_chapters_language(
    video_id: str = Path(..., alias='videoId'), language: str = ...
):
    """
    Delete a chapter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/videos/{videoId}/chapters/{language}',
    description=""" Chapters help your viewers find the sections of the video they are most interested in viewing. Tutorials that use the [chapters endpoint](https://api.video/blog/endpoints/chapters). """,
    tags=['video_chapter_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def g_e_t_videos_video_id_chapters_language(
    video_id: str = Path(..., alias='videoId'), language: str = ...
):
    """
    Show a chapter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/videos/{videoId}/chapters/{language}',
    description=""" Chapters help break the video into sections. Read our [tutorial](https://api.video/blog/tutorials/adding-chapters-to-your-videos) for more details. """,
    tags=['video_chapter_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def p_o_s_t_videos_video_id_chapters_language(
    video_id: str = Path(..., alias='videoId'),
    language: str = ...,
    file: UploadFile = ...,
):
    """
    Upload a chapter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/videos/{videoId}/source',
    description=""" To upload a video to the videoId you created. Replace {videoId} with the id you'd like to use, {access_token} with your token, and /path/to/video.mp4 with the path to the video you'd like to upload. You can only upload your video to the videoId once.
```bash
curl https://ws.api.video/videos/{videoId}/source \
  -H 'Authorization: Bearer {access_token}' \
  -F file=@/path/to/video.mp4

  ```
Tutorials using [video upload](https://api.video/blog/endpoints/video-upload). """,
    tags=['video_content_management', 'video_upload_process'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def p_o_s_t_videos_video_id_source(
    video_id: str = Path(..., alias='videoId'),
    content__range: Optional[constr(pattern=r'^bytes [0-9]*-[0-9]*\/[0-9]*$')] = Header(
        None, alias='Content-Range'
    ),
    file: UploadFile = ...,
):
    """
    Upload a video
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/videos/{videoId}/status',
    description=""" This API provides upload status & encoding status to determine when the video is uploaded or ready to playback. Once encoding is completed, the response also lists the available stream qualities. Tutorials using [video status](https://api.video/blog/endpoints/video-status). """,
    tags=['video_status_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def g_e_t_video_status(video_id: str = Path(..., alias='videoId')):
    """
    Show video status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/videos/{videoId}/thumbnail',
    description=""" Pick a thumbnail from the given time code. If you'd like to upload an image for your thumbnail, use the [Upload a Thumbnail](https://docs.api.video/reference#post_videos-videoid-thumbnail) endpoint. There may be a short delay for the thumbnail to update.
Tutorials using [Thumbnail picking](https://api.video/blog/endpoints/video-pick-a-thumbnail). """,
    tags=['thumbnail_operations', 'video_content_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def p_a_t_c_h_videos_video_id_thumbnail(
    video_id: str = Path(..., alias='videoId'), body: VideoThumbnailPickPayload = None
):
    """
    Pick a thumbnail
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/videos/{videoId}/thumbnail',
    description=""" The thumbnail is the poster that appears in the player window before video playback begins.
This endpoint allows you to upload an image for the thumbnail.
To select a still frame from the video using a time stamp, use [Pick a Thumbnail](https://docs.api.video/reference#patch_videos-videoid-thumbnail) to pick a time in the video. 
Note: There may be a short delay before the new thumbnail is delivered to our CDN.
Tutorials using [Thumbnail upload](https://api.video/blog/endpoints/videos-upload-a-thumbnail). """,
    tags=['thumbnail_operations', 'video_content_management', 'video_upload_process'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def p_o_s_t_videos_video_id_thumbnail(
    video_id: str = Path(..., alias='videoId'), file: UploadFile = ...
):
    """
    Upload a thumbnail
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhooks',
    description=""" Requests to this endpoint return a list of your webhooks (with all their details). You can filter what the webhook list that the API returns using the parameters described below. """,
    tags=['webhook_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def l_i_s_t_webhooks(
    events: Optional[str] = None,
    current_page: Optional[int] = Query(1, alias='currentPage'),
    page_size: Optional[int] = Query(25, alias='pageSize'),
):
    """
    List all webhooks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhooks',
    description=""" Webhooks can push notifications to your server, rather than polling api.video for changes. We currently offer four events: 
* ```video.encoding.quality.completed```  When a new video is uploaded into your account, it will be encoded into several different HLS sizes/bitrates.  When each version is encoded, your webhook will get a notification.  It will look like ```{ \"type\": \"video.encoding.quality.completed\", \"emittedAt\": \"2021-01-29T16:46:25.217+01:00\", \"videoId\": \"viXXXXXXXX\", \"encoding\": \"hls\", \"quality\": \"720p\"} ```. This request says that the 720p HLS encoding was completed.
* ```live-stream.broadcast.started```  When a livestream begins broadcasting, the broadcasting parameter changes from false to true, and this webhook fires.
* ```live-stream.broadcast.ended```  This event fores when the livestream has finished broadcasting, and the broadcasting parameter flips from false to true.
* ```video.source.recorded```  This event is similar to ```video.encoding.quality.completed```, but tells you if a livestream has been recorded as a VOD. """,
    tags=['webhook_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def p_o_s_t_webhooks(body: WebhooksCreatePayload = None):
    """
    Create Webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/webhooks/{webhookId}',
    description=""" This endpoint will delete the indicated webhook. """,
    tags=['webhook_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def d_e_l_e_t_e_webhook(webhook_id: str = Path(..., alias='webhookId')):
    """
    Delete a Webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhooks/{webhookId}',
    description=""" This call provides the same JSON information provided on Webjhook creation. """,
    tags=['webhook_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def g_e_t__webhook(webhook_id: str = Path(..., alias='webhookId')):
    """
    Show Webhook details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
